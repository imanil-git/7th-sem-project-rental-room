generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Post {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images  String []
  address    String?  // Optional field
  city       String?  // Optional field
  bedroom    Int
  latitude   Float?   // Optional field
  longitude  Float?   // Optional field
  property   Property
  
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  postDetail PostDetail?

  @@index([city]) // Index on city for faster search
  savedPosts SavedPost[]
}

enum Property {
  Apartment
  SingleRoom
  TwoRoom
}

model PostDetail {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  desc         String
  parking      String?
  runningwater String?
  balcony      String?
  school       Int?
  bus          Int?
  phoneNumber  Int?     // Make this nullable
  post         Post?    @relation(fields: [postId], references: [id])
  postId       String   @db.ObjectId @unique
}
model SavedPost{
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User?    @relation(fields: [userId], references: [id]) // Change to optional
  post         Post?    @relation(fields: [postId], references: [id]) // Change to optional
  postId       String   @db.ObjectId @unique
  userId       String   @db.ObjectId @unique
  createdAt  DateTime @default(now())
@@unique([userId,postId])
}
model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String   @unique
  email      String   @unique
  password   String
  avatar     String?
  createdAt  DateTime @default(now())
  post       Post[]
  savedPosts SavedPost[]
chats Chat[] @relation(fields: [chatIDs],references: [id])
chatIDs String[] @db.ObjectId
}

model Chat{
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  users  User[] @relation(fields: [userIDs],references: [id])
  userIDs String[] @db.ObjectId
  createdAt  DateTime @default(now())
seenBy String[] @db.ObjectId
messages Message[]
lastMessage String?
}
model Message{
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  text String
  userId String
  chat Chat @relation(fields: [chatId],references: [id])
  chatId String @db.ObjectId
  createdAt  DateTime @default(now())

}
